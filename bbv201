#!/usr/bin/perl
#######################################################
#
# "The shoe-maker on earth that had the soul of a poet
#       in him won't have to make shoes here."
#
#                                     -Mark Twain
#
#######################################################
#
# Beatnik Box - Version 2.01 Alpha
#
# Programming Begins 11.10.03 at 8:32pm
# at 859 N. 21st Street, Apt #2, Philadelphia, PA 19130
#
# The Brainchild of Charles RMC Hoey
# Intended for a Video Installation
# 
#######################################################
#
# Day 2: 11.12.03 7:55pm
# Gershwin
#
# Took extensive notes at the diner tonight about how
# to actually have this construct reliable poem struc-
# tures.  I scribbled alternately notes about this
# program and stickfigures holding hands or screaming.
# I drank too much coffee, and smoked one too many
# cigarettes.
#
#######################################################
#
# 8:58pm
# Amon Tobin
#
#######################################################

# Ezra Pound determines how many lines/words the poem will be
sub pound{

	$lines = int( rand(15)) + 3;

	$words = int( rand(8)) + 3;

}

# Allan Ginsberg decides the poem structure for Ezra's value
sub ginsberg{
	
	# define the poem array per Pound's instructions
	$poem[$_[0]][$_[1]];
	
	# pick a random number of words for each line
	for($lines; $i < $lines; $i++) {
		$wordcount[$i] = int( rand($words)) +1;
	}
	$i = 0;
	# define each line
	for($lines; $i < $lines; $i++) {
		$flaggo = 1;
		for($wordcount[$i]; $x < $wordcount[$i]; $x++) {
		# determine what type of word it will be
		# The following is a key for word types:
		# 0 = article
		# 1 = verb
		# 2 = adjective
		# 3 = adverb
		# 4 = noun.thing
		# 5 = noun.person
		# 6 = noun.place
		# 7 = preposition
		# 8 = conjunction
		if (!($flaggo)) {
			$type = rachter($i, $x);
			print " R$type"
		} else {
			$type = int( rand(9)) + 0;
			$flaggo--;
			print " S$type"
		}
		$poem[$i][$x] = $type;
		}
		print "\nThis would be racther($i, $x).\n";
		$x = 0;
	}

}

# Rachter checks to see what words are valid for input by looking at
# the part of speech of the previous word used
sub rachter{
	$privy = $_[1] - 1;
	$prevword = $poem[$_[0]][$privy];
	print $prevword;
	# make sure it's not the first word in the line
#	if($privy > 0) {
		# if article
#		if($prevword == 0) {
#			@goods = (2, 3, 4, 5, 6);
#			$val = int( rand(5)) + 0;
#			return $goods[$val];
#		} else if($prevword == 1) {
#			@goods = (3, 4, 5, 6, 7, 9);
#			$val = int( rand(6)) + 0;
#			return $goods[$val];
#		} else if($prevword == 2) {
#			@goods = (4, 8, 9);
#			$val = int ( rand(3)) + 0;
#			return $goods[$val];
#		} else if($prevword == 3) {
#			@goods = (5, 6, 7);
#			$val = int ( rand(3)) + 0;
#			return $goods[$val];
#		} else if($prevword == 4) {
#			@goods = (1, 2, 3, 4);
#			$val = int ( rand(4)) + 0;
#			return $goods[$val];
#		} else if($prevword > 4 AND $prevword < 8) {
#			@goods = (9, 10);
#			$val = int ( rand(2)) + 0;
#			return $goods[$val];
#		} else if($prevword == 8) {
#			@goods = (3, 5, 6, 7);
#			$val = int ( rand(4)) + 0;
#			return $goods[$val];
#		} else {
#			$val = int ( rand 9)) + 0;
#			return $val;
#		}
#	} else {
		$val = int ( rand(10)) + 0;
		return $val;


}


pound();
ginsberg(12, 6);

$thecube = {
	WORD => [ "cascade", "cascades" ],
	CASE => 1,
	SYNONYM => [ "fall", "pour", "tumble" ],
	ANTONYM => [ "ascend", "climb"],
	HOMONYM => [ "aid", "blade", "fade", "strayed", "paid", "laid", "grenade", "handmade", "invade", "collonnade", "masquerade"],
	};

$thecube2[1][1][0] = "cascade";
$thecube2[1][1][1] = "cascades";
$thecube2[1][2][0] = "1";
$thecube2[1][3][0] = "fall";
$thecube2[1][3][1] = "pour";
$thecube2[1][3][2] = "tumble";


